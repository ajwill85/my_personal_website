AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for hosting a React/Vite website on S3 with CloudFront CDN using existing ACM certificate and Cloudflare DNS'

Parameters:
  DomainName:
    Type: String
    Description: 'Your domain name (e.g., ajwill.ai)'
    AllowedPattern: '^[a-z0-9][a-z0-9-]{1,61}[a-z0-9]\.[a-z]{2,}$'
    ConstraintDescription: 'Must be a valid domain name'
  
  ProjectName:
    Type: String
    Description: 'Name for your project (used for resource naming)'
    Default: 'my-website'
    AllowedPattern: '^[a-z0-9-]+$'
    ConstraintDescription: 'Must contain only lowercase letters, numbers, and hyphens'

  ExistingCertificateArn:
    Type: String
    Description: 'ARN of existing ACM certificate in us-east-1'
    AllowedPattern: '^arn:aws:acm:us-east-1:[0-9]+:certificate/[a-f0-9-]+$'
    ConstraintDescription: 'Must be a valid ACM certificate ARN in us-east-1'

Resources:
  # S3 Bucket for website content
  WebsiteBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${ProjectName}-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: 'index.html'
        ErrorDocument: 'index.html'  # For SPA routing
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-website-bucket'
        - Key: Project
          Value: !Ref ProjectName

  # S3 Bucket Policy for CloudFront access
  WebsiteBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontOAI
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: 's3:GetObject'
            Resource: !Sub '${WebsiteBucket.Arn}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  # CloudFront Origin Access Control
  CloudFrontOAC:
    Type: 'AWS::CloudFront::OriginAccessControl'
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${ProjectName}-oac'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2and3
        IPV6Enabled: true
        Comment: !Sub 'CloudFront distribution for ${DomainName}'
        DefaultRootObject: 'index.html'
        PriceClass: PriceClass_100  # Use only North America and Europe edge locations
        Aliases:
          - !Ref DomainName
          - !Sub 'www.${DomainName}'
        ViewerCertificate:
          AcmCertificateArn: !Ref ExistingCertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            OriginAccessControlId: !GetAtt CloudFrontOAC.Id
            S3OriginConfig: {}
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # CORS-S3Origin
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 300
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-cloudfront'
        - Key: Project
          Value: !Ref ProjectName

Outputs:
  WebsiteBucketName:
    Description: 'Name of the S3 bucket for website content'
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'

  CloudFrontDistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-DistributionId'

  CloudFrontURL:
    Description: 'CloudFront Distribution Domain Name'
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontURL'

  WebsiteURL:
    Description: 'Website URL (after Cloudflare DNS configuration)'
    Value: !Sub 'https://${DomainName}'

  CloudflareCNAMETarget:
    Description: 'Use this as CNAME target in Cloudflare DNS'
    Value: !GetAtt CloudFrontDistribution.DomainName

  CloudflareDNSInstructions:
    Description: 'Cloudflare DNS Configuration'
    Value: !Sub |
      In Cloudflare DNS, create these records:
      1. Type: CNAME, Name: @, Target: ${CloudFrontDistribution.DomainName}, Proxy: OFF (DNS only)
      2. Type: CNAME, Name: www, Target: ${CloudFrontDistribution.DomainName}, Proxy: OFF (DNS only)
